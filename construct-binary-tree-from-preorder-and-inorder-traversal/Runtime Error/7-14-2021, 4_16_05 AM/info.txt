{"id":522131236,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1626216365,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/522131236/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    int getIndex(vector<int>& arr,int s,int e,int x)\n    {\n\n\n      int i = 0;\n      for(i=s;i<=e;i++)\n      {\n        if(arr[i] == x)\n          break;\n      }\n        return i;\n    }\n    \n    TreeNode* helper(vector<int>& preorder, vector<int>& inorder,int start,int end)\n    {\n      static int i = 0;\n\n      if(start>end)\n        return NULL;\n\n      int rootData = preorder[i];\n      i++;\n\n      TreeNode*  root  = new TreeNode(rootData);\n\n      if(start == end)\n          return root;\n        \n      int rootIndex = getIndex(inorder,start,end,rootData);\n\n      root->left = helper(preorder,inorder,start,rootIndex-1);\n      root->right = helper(preorder,inorder,rootIndex+1,end);\n\n      return root;    \n    }\n    \n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        \n        \n        return helper(preorder,inorder,0,inorder.size()-1);\n        \n    }\n};","compare_result":"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}