{"id":522132536,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1626216655,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/522132536/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"74.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) \n    {\n        int preorderLen = preorder.size();\n        int inorderLen  = inorder.size();\n        \n        if (preorderLen <= 0 || inorderLen <= 0)\n            return NULL;\n        \n//         if (preorderLen != inorderLen)\n//             return NULL;\n        \n        int k;\n        for(k=0; preorder[0]!=inorder[k];k++);\n        \n        TreeNode* newNode = new TreeNode(preorder[0]);\n        \n        vector<int> tmpPreorder1 (preorder.begin()+1, preorder.begin()+1+k);\n        vector<int> tmpInorder1  (inorder.begin(), inorder.begin()+k);\n        \n        newNode->left  = buildTree(tmpPreorder1, tmpInorder1);\n        \n        vector<int> tmpPreorder2 (preorder.begin()+1+k, preorder.end());\n        vector<int> tmpInorder2  (inorder.begin()+k+1,  inorder.end());\n        \n        newNode->right = buildTree(tmpPreorder2, tmpInorder2);\n        \n        return newNode;\n        \n    }    \n    \n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}