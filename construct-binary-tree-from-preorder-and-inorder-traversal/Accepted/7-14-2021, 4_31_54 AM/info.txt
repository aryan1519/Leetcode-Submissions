{"id":522135749,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1626217314,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/522135749/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"73.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) \n    {\n        int preorderLen = preorder.size();\n        int inorderLen  = inorder.size();\n        \n        if (preorderLen <= 0 || inorderLen <= 0)\n            return NULL;\n        \n        int rootIndex;\n        \n        for(int i=0;i<inorder.size();i++)\n        {\n            if(inorder[i] == preorder[0])\n            {\n                rootIndex = i;\n                break;\n            }\n        }\n        \n        TreeNode* newNode = new TreeNode(preorder[0]);\n        \n        vector<int> leftPreorder (preorder.begin()+1, preorder.begin()+1+rootIndex);\n        vector<int> leftInorder  (inorder.begin(), inorder.begin()+rootIndex);\n        \n        newNode->left  = buildTree(leftPreorder, leftInorder);\n        \n        vector<int> rightPreorder (preorder.begin()+1+rootIndex, preorder.end());\n        vector<int> rightInorder  (inorder.begin()+rootIndex+1,  inorder.end());\n        \n        newNode->right = buildTree(rightPreorder, rightInorder);\n        \n        return newNode;\n        \n    }    \n    \n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}